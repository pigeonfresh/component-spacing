@mixin check-picks($picks, $map) {
  @each $pick in $picks {
    @if map-has-key($map, $pick) {
    } @else {
      @error 'It seems the value \'#{$pick}\' doesn\'t exist ðŸ˜¢';
    }
  }
}

@function get-value($pick, $map) {
  @return map-get($map, $pick);
}

@function appended($state) {
  @if ($state) {
    @return '&';
  }
  @return '';
}

@mixin getStyles($startPick, $endPick, $map, $property) {
  $startValue: get-value($startPick, $map);
  $endValue: get-value($endPick, $map);

  @if ($logicalProperties) {
    @if ($vertical) {
      #{$property}-block-start: $startValue;
      #{$property}-block-end: $endValue;
    } @else {
      #{$property}-inline-start: $startValue;
      #{$property}-inline-end: $endValue;
    }
  } @else {
    @if ($vertical) {
      #{$property}-top: $startValue;
      #{$property}-bottom: $endValue;
    } @else {
      #{$property}-left: $startValue;
      #{$property}-right: $endValue;
    }
  }
}

@mixin construct-classes($spacingType, $map, $appended: false) {
  $appendedSelector: appended($appended);

  @each $spacingName, $value in $map {
    @if ($uniformSpacing) {
      #{$appendedSelector}.#{$spacingType}-#{$spacingName} {
        @each $direction in $directionProperties {
          #{$direction}: #{$value};
        }
      }
    }

    @if ($variableSpacing) {
      @each $direction in $directionProperties {
        $index: index($directionProperties, $direction);
        #{$appendedSelector}.#{map-get($classNameConfig, $spacingType)}-#{nth(map-get($classNameConfig, direction), $index)}-#{$spacingName} {
          #{$spacingType}-#{$direction}: #{$value};
        }
      }
    }
  }
}

@mixin create-margins($appended: false) {
  @include construct-classes('margin', $componentMargin, $appended);
}

@mixin create-padding($appended: false) {
  @include construct-classes('padding', $componentPadding, $appended);
}
