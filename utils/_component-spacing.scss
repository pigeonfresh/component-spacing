@function nested($state) {
  @if ($state) {
    @return '&';
  }
  @return '';
}

@function get-spacing-value($spacingPick, $map) {
  @return map-get($map, $spacingPick);
}

@mixin create-styles($property, $className, $directions, $spacingMap, $nested) {
  $nestedSelector: nested($nested);

  @each $option, $value in $spacingMap {
    #{$nestedSelector}.#{$className}-#{$option} {
      @each $direction, $name in $directions {
        #{$property}-#{$direction}: #{$value};
      }
    }

    @each $direction, $name in $directions {
      #{$nestedSelector}.#{$className}-#{$name}-#{$option} {
        #{$property}-#{$direction}: $value;
      }
    }
  }
}

@mixin create-padding-styles($spacingMap: $componentPadding, $nested: false) {
  @include create-styles(padding, $paddingClassName, $paddingDirection, $spacingMap, $nested);
}

@mixin create-margin-styles($spacingMap: $componentMargin, $nested: false) {
  @include create-styles(margin, $marginClassName, $marginDirection, $spacingMap, $nested);
}

@mixin create-spacing-styles($spacingMap: $componentSpacing, $nested: false) {
  @include create-margin-styles($spacingMap, $nested);
  @include create-padding-styles($spacingMap, $nested);
}

@mixin create-appended-spacing-styles($spacingMap: $componentSpacing) {
  @include create-spacing-styles($spacingMap, true);
}

@mixin create-appended-margin-styles($spacingMap: $componentMargin) {
  @include create-margin-styles($spacingMap, true);
}

@mixin create-appended-padding-styles($spacingMap: $componentPadding) {
  @include create-padding-styles($spacingMap, true);
}

@mixin check-picks-total($list) {
  @if (length($list) >= 3) {
    @error 'Your list can not contain more than 3 items';
  }
}

@mixin check-pick($list, $map) {
  @each $pick in $list {
    @if map-has-key($map, $pick) {
    } @else {
      @error 'It seems the value "#{$pick}" doesn\'t exist ðŸ˜¢';
    }
  }
}

@mixin check($picks, $map) {
  @include check-picks-total($picks);
  @include check-pick($picks, $map);
}

@mixin component-padding($spacing: $defaultComponentPadding, $map: $componentPadding) {
  @include check($spacing, $map);
  padding-top: get-spacing-value(nth($spacing, 1), $map);
  padding-bottom: get-spacing-value(nth($spacing, -1), $map);
}

@mixin component-margin($spacing: $defaultComponentMargin, $map: $componentMargin) {
  @include check($spacing, $map);
  margin-top: get-spacing-value(nth($spacing, 1), $map);
  margin-bottom: get-spacing-value(nth($spacing, -1), $map);
}
